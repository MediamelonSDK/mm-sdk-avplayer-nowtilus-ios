// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MediaMelonNowtilustvOS
import AVFoundation
import AVKit
import Foundation
@_exported import MediaMelonNowtilustvOS
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum VastErrorCodes : Swift.Int {
  case xmlParsingError
  case vastSchemaValidationError
  case vastVersionOfResponseNotSupported
  case traffickingError
  case videoPlayerExpectingDifferentLinearity
  case videoPlayerExpectingDifferentDuration
  case videoPlayerExpectingDifferentSize
  case adCategoryNotProvided
  case generalWrapperError
  case timeoutOfVastURI
  case wrapperLimitReached
  case noAdsVastResponse
  case inlineResponseFailedToDisplayInTime
  case generalLinearError
  case fileNotFound
  case timeoutOfMediaFile
  case mediaFileNotSupported
  case problemDisplayingMediaFile
  case conditionalAdRejected
  case interactiveUnitInNodeNotExecuted
  case verificationUnitInNodeNotExecuted
  case generalNonLinearAdsError
  case creativeDimensionTooLarge
  case unableToFetchResource
  case nonLinearResourceNotSupported
  case generalCompanionAdsError
  case noAvailableSpace
  case unableToDisplayCompanion
  case unableToFetchCompanionResource
  case companionResourceNotSupported
  case undefinedError
  case generalVPAIDError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VastError : Swift.Error {
  case invalidXMLDocument
  case invalidVASTDocument
  case unableToParseDocument
  case unableToCreateXMLParser
  case wrapperLimitReached
  case singleRequestTimeLimitReached
  case wrapperTimeLimitReached
  case internalError
  public static func == (a: MediaMelonNowtilustvOS.VastError, b: MediaMelonNowtilustvOS.VastError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastCreativeParameter : Swift.Codable {
  public var creativeId: Swift.String
  public var name: Swift.String
  public var type: Swift.String
  public var content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastCreativeParameter {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastCreativeParameter : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastCreativeParameter, b: MediaMelonNowtilustvOS.VastCreativeParameter) -> Swift.Bool
}
public var macroDiction: [Swift.String : Any]
public struct VastMediaFiles : Swift.Codable {
  public var mediaFiles: [MediaMelonNowtilustvOS.VastMediaFile]
  public var interactiveCreativeFiles: [MediaMelonNowtilustvOS.VastInteractiveCreativeFile]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastMediaFiles : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastMediaFiles, b: MediaMelonNowtilustvOS.VastMediaFiles) -> Swift.Bool
}
public struct VMAPExtension {
}
public protocol VastTrackerNonLinearDelegate : AnyObject {
  func adBreakStart(vastTracker: MediaMelonNowtilustvOS.VastTrackerNonLinear)
  func adBreakComplete(vastTracker: MediaMelonNowtilustvOS.VastTrackerNonLinear)
}
public class VastTrackerNonLinear {
  weak public var delegate: (any MediaMelonNowtilustvOS.VastTrackerNonLinearDelegate)?
  final public let id: Swift.String
  final public let vastModel: MediaMelonNowtilustvOS.VastModel
  final public let totalAds: Swift.Int
  final public let startTime: Swift.Double
  @available(*, message: "do not use VastTracker for storing this model, it is not being used")
  public var vmapModel: MediaMelonNowtilustvOS.VMAPModel?
  public init(id: Swift.String, vastModel: MediaMelonNowtilustvOS.VastModel, startTime: Swift.Double = 0.0, supportAdBuffets: Swift.Bool = false, delegate: (any MediaMelonNowtilustvOS.VastTrackerNonLinearDelegate)? = nil, trackProgressCumulatively: Swift.Bool = true)
  @available(*, message: "Use init(id:,vastModel:) instead")
  convenience public init(id: Swift.String, vmapModel: MediaMelonNowtilustvOS.VMAPModel, breakId: Swift.String, startTime: Swift.Double, supportAdBuffets: Swift.Bool = false, delegate: (any MediaMelonNowtilustvOS.VastTrackerNonLinearDelegate)? = nil) throws
  public func updateProgress(time: Swift.Double) throws
  public func adBreakCompleted() throws
  @objc deinit
}
public enum VMAPAdBreakType : Swift.String, Swift.Codable {
  case linear
  case nonlinear
  case display
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPAdBreak : Swift.Codable {
  public var breakId: Swift.String?
  public var repeatAfter: Swift.String?
  public let breakType: MediaMelonNowtilustvOS.VMAPAdBreakType
  public let timeOffset: Swift.String
  public var adSource: MediaMelonNowtilustvOS.VMAPAdSource?
  public var trackingEvents: [MediaMelonNowtilustvOS.VMAPTrackingEvent]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VMAPAdBreak {
  public init(attrDict: [Swift.String : Swift.String])
  public func trackEvent(withType type: MediaMelonNowtilustvOS.VMAPTrackingEventType)
  public func trackEvents(withUrls urls: [Foundation.URL])
}
public struct VMAPModel : Swift.Codable {
  public let version: Swift.String
  public var adBreaks: [MediaMelonNowtilustvOS.VMAPAdBreak]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VMAPModel {
  public init(attrDict: [Swift.String : Swift.String])
}
public struct VastResource : Swift.Codable {
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastResource : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastResource, b: MediaMelonNowtilustvOS.VastResource) -> Swift.Bool
}
public struct VastSurvey : Swift.Codable {
  public let type: Swift.String?
  public var survey: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastSurvey : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastSurvey, b: MediaMelonNowtilustvOS.VastSurvey) -> Swift.Bool
}
public struct VastWrapper : Swift.Codable {
  public let followAdditionalWrappers: Swift.Bool?
  public let allowMultipleAds: Swift.Bool?
  public let fallbackOnNoAd: Swift.Bool?
  public var adTagUri: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastWrapper : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastWrapper, b: MediaMelonNowtilustvOS.VastWrapper) -> Swift.Bool
}
public struct VastIconClickTracking : Swift.Codable {
  public let id: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastIconClickTracking : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastIconClickTracking, b: MediaMelonNowtilustvOS.VastIconClickTracking) -> Swift.Bool
}
public struct VastUniversalAdId : Swift.Codable {
  public let idRegistry: Swift.String
  public let idValue: Swift.String
  public var uniqueCreativeId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastUniversalAdId {
  public init?(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastUniversalAdId : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastUniversalAdId, b: MediaMelonNowtilustvOS.VastUniversalAdId) -> Swift.Bool
}
public struct VastExtension : Swift.Codable {
  public let type: Swift.String
  public var creativeParameters: [MediaMelonNowtilustvOS.VastCreativeParameter]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastExtension {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastExtension : Swift.Equatable {
  public static func == (lhs: MediaMelonNowtilustvOS.VastExtension, rhs: MediaMelonNowtilustvOS.VastExtension) -> Swift.Bool
}
public struct VastStaticResource : Swift.Codable {
  public let creativeType: Swift.String
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastStaticResource : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastStaticResource, b: MediaMelonNowtilustvOS.VastStaticResource) -> Swift.Bool
}
public enum VMAPError : Swift.Error {
  case invalidXMLDocument
  case invalidVMAPDocument
  case unableToParseDocument
  case unableToCreateXMLParser
  case internalError
  public static func == (a: MediaMelonNowtilustvOS.VMAPError, b: MediaMelonNowtilustvOS.VMAPError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastInteractiveCreativeFile : Swift.Codable {
  public let type: Swift.String?
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastInteractiveCreativeFile : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastInteractiveCreativeFile, b: MediaMelonNowtilustvOS.VastInteractiveCreativeFile) -> Swift.Bool
}
public enum ClickType : Swift.String, Swift.Codable {
  case clickThrough
  case clickTracking
  case customClick
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastVideoClick : Swift.Codable {
  public let id: Swift.String?
  public let type: MediaMelonNowtilustvOS.ClickType
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastVideoClick {
  public init(type: MediaMelonNowtilustvOS.ClickType, attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastVideoClick : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastVideoClick, b: MediaMelonNowtilustvOS.VastVideoClick) -> Swift.Bool
}
public struct VastVerification : Swift.Codable {
  public let vendor: Foundation.URL?
  public var viewableImpression: MediaMelonNowtilustvOS.VastViewableImpression?
  public var javaScriptResource: [MediaMelonNowtilustvOS.VastResource]
  public var flashResources: [MediaMelonNowtilustvOS.VastResource]
  public var verificationParameters: MediaMelonNowtilustvOS.VastAdVerificationParameters?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastVerification : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastVerification, b: MediaMelonNowtilustvOS.VastVerification) -> Swift.Bool
}
public struct VastModel : Swift.Codable {
  public let version: Swift.String
  public var ads: [MediaMelonNowtilustvOS.VastAd]
  public var errors: [Foundation.URL]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastModel {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastModel : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastModel, b: MediaMelonNowtilustvOS.VastModel) -> Swift.Bool
}
public enum PricingModel : Swift.String, Swift.Codable {
  case cpc
  case cpm
  case cpe
  case cpv
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastPricing : Swift.Codable {
  public let model: MediaMelonNowtilustvOS.PricingModel
  public let currency: Swift.String
  public var pricing: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastPricing : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastPricing, b: MediaMelonNowtilustvOS.VastPricing) -> Swift.Bool
}
public enum VMAPAdSourceTemplate : Swift.String, Swift.Codable {
  case vast
  case vast1
  case vast2
  case vast3
  case vast4
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPAdSource : Swift.Codable {
  public let allowMultipleAds: Swift.Bool
  public let followRedirects: Swift.Bool
  public let id: Swift.String
  public var vastAdData: MediaMelonNowtilustvOS.VastModel?
  public var adTagURI: Foundation.URL?
  public var customAdData: Swift.String?
  public var templateType: MediaMelonNowtilustvOS.VMAPAdSourceTemplate?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VMAPAdSource {
  public init(attrDict: [Swift.String : Swift.String])
}
public enum VMAPErrorCodes : Swift.Int {
  case undefined
  case vmapSchemaError
  case vmapResponesVersionNotSupported
  case vmapParsingError
  case adBreakTypeNotSupported
  case generalAdResponseDocumentError
  case adResponseTemplateTypeNotSupported
  case adResponseDocumentExtractionOrParsingError
  case adResponseDocumentRetrievalTimeout
  case adResponseDocumentRetrievalError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VMAPTrackingEventType : Swift.String, Swift.Codable {
  case breakStart
  case breakEnd
  case error
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPTrackingEvent : Swift.Codable {
  public let event: MediaMelonNowtilustvOS.VMAPTrackingEventType
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VMAPTrackingEvent {
  public init(attrDict: [Swift.String : Swift.String])
}
public struct VastNonLinear : Swift.Codable {
  public var height: Swift.String
  public var id: Swift.String
  public var width: Swift.String
  public var staticResource: MediaMelonNowtilustvOS.VastStaticResource?
  public var nonLinearClickTracking: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastNonLinear {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastNonLinear : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastNonLinear, b: MediaMelonNowtilustvOS.VastNonLinear) -> Swift.Bool
}
public struct VastLinearCreative : Swift.Codable {
  public let skipOffset: Swift.String?
  public var duration: Swift.Double?
  public var adParameters: MediaMelonNowtilustvOS.VastAdParameters?
  public var videoClicks: [MediaMelonNowtilustvOS.VastVideoClick]
  public var trackingEvents: [MediaMelonNowtilustvOS.VastTrackingEvent]
  public var files: MediaMelonNowtilustvOS.VastMediaFiles
  public var icons: [MediaMelonNowtilustvOS.VastIcon]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastLinearCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastLinearCreative : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastLinearCreative, b: MediaMelonNowtilustvOS.VastLinearCreative) -> Swift.Bool
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public struct VastIcon : Swift.Codable {
  public let program: Swift.String
  public let width: Swift.Int
  public let height: Swift.Int
  public let xPosition: Swift.String
  public let yPosition: Swift.String
  public let duration: Swift.Double
  public let offset: Swift.Double
  public let apiFramework: Swift.String
  public let pxratio: Swift.Double
  public var iconViewTracking: [Foundation.URL]
  public var iconClicks: MediaMelonNowtilustvOS.IconClicks?
  public var staticResource: [MediaMelonNowtilustvOS.VastStaticResource]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastIcon {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastIcon : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastIcon, b: MediaMelonNowtilustvOS.VastIcon) -> Swift.Bool
}
public struct VastMediaFile : Swift.Codable {
  public let delivery: Swift.String
  public let type: Swift.String
  public let width: Swift.String
  public let height: Swift.String
  public let codec: Swift.String?
  public let id: Swift.String?
  public let bitrate: Swift.Int?
  public let minBitrate: Swift.Int?
  public let maxBitrate: Swift.Int?
  public let scalable: Swift.Bool?
  public let maintainAspectRatio: Swift.Bool?
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastMediaFile {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastMediaFile : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastMediaFile, b: MediaMelonNowtilustvOS.VastMediaFile) -> Swift.Bool
}
public enum TrackingEventType : Swift.String, Swift.Codable {
  case impression
  case firstQuartile
  case midpoint
  case thirdQuartile
  case complete
  case creativeView
  case start
  case mute
  case unmute
  case pause
  case rewind
  case resume
  case fullscreen
  case exitFullscreen
  case playerExpand
  case playerCollapse
  case acceptInvitationLinear
  case closeLinear
  case skip
  case progress
  case collapse
  case expand
  case acceptInvitation
  case close
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastTrackingEvent : Swift.Codable {
  public let type: MediaMelonNowtilustvOS.TrackingEventType
  public let offset: Swift.Double?
  public var url: Foundation.URL?
  public var tracked: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastTrackingEvent {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastTrackingEvent : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastTrackingEvent, b: MediaMelonNowtilustvOS.VastTrackingEvent) -> Swift.Bool
}
public struct VastImpression : Swift.Codable {
  public let id: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastImpression {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastImpression : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastImpression, b: MediaMelonNowtilustvOS.VastImpression) -> Swift.Bool
}
public struct VastNonLinearAdsCreative : Swift.Codable {
  public var trackingEvents: [MediaMelonNowtilustvOS.VastTrackingEvent]
  public var nonLinear: [MediaMelonNowtilustvOS.VastNonLinear]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastNonLinearAdsCreative : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastNonLinearAdsCreative, b: MediaMelonNowtilustvOS.VastNonLinearAdsCreative) -> Swift.Bool
}
public protocol VastTrackerDelegate : AnyObject {
  func adFirstQuartile(vastTracker: MediaMelonNowtilustvOS.VastTracker, ad: MediaMelonNowtilustvOS.VastAd)
  func adMidpoint(vastTracker: MediaMelonNowtilustvOS.VastTracker, ad: MediaMelonNowtilustvOS.VastAd)
  func adThirdQuartile(vastTracker: MediaMelonNowtilustvOS.VastTracker, ad: MediaMelonNowtilustvOS.VastAd)
}
public struct TrackerModel {
}
public class VastTracker {
  weak public var delegate: (any MediaMelonNowtilustvOS.VastTrackerDelegate)?
  final public let vastModel: MediaMelonNowtilustvOS.VastModel
  final public let totalAds: Swift.Int
  final public let startTime: Swift.Double
  public init(vastModel: MediaMelonNowtilustvOS.VastModel, startTime: Swift.Double = 0.0, supportAdBuffets: Swift.Bool = false, delegate: (any MediaMelonNowtilustvOS.VastTrackerDelegate)? = nil, trackProgressCumulatively: Swift.Bool = true)
  @objc deinit
}
extension MediaMelonNowtilustvOS.VastTracker {
  public func updateProgress(time: Swift.Double) throws
  public func trackAdBreakStart(for adBreak: MediaMelonNowtilustvOS.VMAPAdBreak)
  public func trackAdBreakEnd(for adBreak: MediaMelonNowtilustvOS.VMAPAdBreak)
  public func trackAdBreakEvents(for adBreak: MediaMelonNowtilustvOS.VMAPAdBreak, withURLs urls: [Foundation.URL])
  public func trackAdStart(withId id: Swift.String) throws
  public func trackAdComplete() throws
  public func trackSkippedAds(with ids: [Swift.String])
  public func played() throws
  public func paused() throws
  public func fullscreen(_ val: Swift.Bool) throws
  public func rewind() throws
  public func muted(_ val: Swift.Bool) throws
  public func acceptedLinearInvitation() throws
  public func closed() throws
  public func clicked() throws -> Foundation.URL?
  public func clickedWithCustomAction() throws -> [Foundation.URL]
  public func error(withReason code: MediaMelonNowtilustvOS.VastErrorCodes?) throws
  public func trackViewability(type: MediaMelonNowtilustvOS.VastViewableImpressionType) throws
}
public enum VastViewableImpressionType : Swift.String {
  case viewable
  case notViewable
  case viewUndetermined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastViewableImpression : Swift.Codable {
  public let id: Swift.String
  public var url: Foundation.URL?
  public var viewable: [Foundation.URL]
  public var notViewable: [Foundation.URL]
  public var viewUndetermined: [Foundation.URL]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastViewableImpression : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastViewableImpression, b: MediaMelonNowtilustvOS.VastViewableImpression) -> Swift.Bool
}
public struct VastAdVerificationParameters : Swift.Codable {
  public var data: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastAdVerificationParameters : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastAdVerificationParameters, b: MediaMelonNowtilustvOS.VastAdVerificationParameters) -> Swift.Bool
}
public struct VastCompanionClickTracking {
  public let id: Swift.String?
}
public struct VastCompanionCreative : Swift.Codable {
  public let width: Swift.Int
  public let height: Swift.Int
  public let id: Swift.String?
  public let assetWidth: Swift.Int?
  public let assetHeight: Swift.Int?
  public let expandedWidth: Swift.Int?
  public let expandedHeight: Swift.Int?
  public let apiFramework: Swift.String?
  public let adSlotId: Swift.String?
  public let pxRatio: Swift.Double?
  public var staticResource: [MediaMelonNowtilustvOS.VastStaticResource]
  public var iFrameResource: [Foundation.URL]
  public var htmlResource: [Foundation.URL]
  public var altText: Swift.String?
  public var companionClickThrough: Foundation.URL?
  public var companionClickTracking: [Foundation.URL]
  public var trackingEvents: [MediaMelonNowtilustvOS.VastTrackingEvent]
  public var adParameters: MediaMelonNowtilustvOS.VastAdParameters?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastCompanionCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastCompanionCreative : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastCompanionCreative, b: MediaMelonNowtilustvOS.VastCompanionCreative) -> Swift.Bool
}
public enum ReachabilityErrorMM : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotificationMM: Foundation.NSNotification.Name
public class ReachabilityMM {
  public typealias NetworkReachable = (MediaMelonNowtilustvOS.ReachabilityMM) -> ()
  public typealias NetworkUnreachable = (MediaMelonNowtilustvOS.ReachabilityMM) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: MediaMelonNowtilustvOS.ReachabilityMM.NetworkStatus, b: MediaMelonNowtilustvOS.ReachabilityMM.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: MediaMelonNowtilustvOS.ReachabilityMM.NetworkReachable?
  public var whenUnreachable: MediaMelonNowtilustvOS.ReachabilityMM.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: MediaMelonNowtilustvOS.ReachabilityMM.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension MediaMelonNowtilustvOS.ReachabilityMM {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MMReachabilityManager : ObjectiveC.NSObject {
  public static let shared: MediaMelonNowtilustvOS.MMReachabilityManager
  public func startMonitoring()
  public func stopMonitoring()
  @objc override dynamic public init()
  @objc deinit
}
public enum MMSSAIAdSate : Swift.Int {
  case request
  case adPlaying
  case adPaused
  case adSkipped
  case adCompleted
  case adError
  case adBlocked
  case adImpression
  case adStarted
  case adClicked
  case adResumed
  case adFirstQuartile
  case adMidpoint
  case adThirdQuartile
  case adEnded
  case adCueTimelineAdded
  case adCueTimelineStart
  case adCueTimelineEnd
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MMSSAIAdDetails {
  public var adId: Swift.String
  public var adTitle: Swift.String
  public var adServer: Swift.String
  public var adIndex: Swift.Int
  public var adTotalAdsInPod: Swift.Int
  public var adDuration: Swift.Int64
  public var startTime: Swift.Int64
  public var endTime: Swift.Int64
  public var firstQuartile: Swift.Int64
  public var midPoint: Swift.Int64
  public var thirdQuartile: Swift.Int64
  public var complete: Swift.Int64
  public var adCurrentPlaybackTime: Swift.Int64
  public var position: Swift.String
  public var active: Swift.Bool
  public var adState: Swift.String
  public var streamType: Swift.String
  public var isLinear: Swift.Bool
  public var adImpressionsTemplates: [MediaMelonNowtilustvOS.VastImpression]
  public var adTrackingEvents: [MediaMelonNowtilustvOS.VastTrackingEvent]
  public var adClickEvents: [MediaMelonNowtilustvOS.VastVideoClick]
  public var startPosition: Swift.Int64
  public var endPosition: Swift.Int64
  @objc deinit
}
public protocol GenericAdProtocol : AnyObject {
  func notifySSAIAdDetails(eventName: MediaMelonNowtilustvOS.MMSSAIAdSate, adInfo: MediaMelonNowtilustvOS.MMSSAIAdDetails)
  func notifySSAIAdDetailsWithTimeline(eventName: MediaMelonNowtilustvOS.MMSSAIAdSate, adTimeline: [MediaMelonNowtilustvOS.MMSSAIAdDetails])
}
public protocol MMSSAIDelegate {
  func notifySSAIEventWithTimeline(state: MediaMelonNowtilustvOS.MMAdState, adTimeline: [MediaMelonNowtilustvOS.MMSSAIAdInfo])
  func notifySSAIAdEvent(state: MediaMelonNowtilustvOS.MMAdState, adInfo: MediaMelonNowtilustvOS.MMSSAIAdInfo)
}
public enum MMCurrentPlayerState {
  case IDLE, PLAYING, PAUSED, STOPPED, ERROR
  public static func == (a: MediaMelonNowtilustvOS.MMCurrentPlayerState, b: MediaMelonNowtilustvOS.MMCurrentPlayerState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class GenericMMWrapper : ObjectiveC.NSObject, MediaMelonNowtilustvOS.MMSmartStreamingObserver {
  @objc public func sessionInitializationCompleted(with status: MediaMelonNowtilustvOS.MMSmartStreamingInitializationStatus, andDescription description: Swift.String!, forCmdWithId cmdId: Swift.Int, nowtilusPermission enableNowtilus: Swift.Bool)
  public static let shared: MediaMelonNowtilustvOS.GenericMMWrapper
  public var extIsLive: Swift.Bool
  public func getCoreSDKVersion() -> Swift.String
  public func getHarmonicSSAIVersion() -> Swift.String
  public func reportSDKVersion(sdkVersion: Swift.String)
  public static func disableManifestsFetch(disable: Swift.Bool)
  public func reportDeviceCapabilities()
  public func reportCustomMetadata(key: Swift.String, value: Swift.String)
  public static func updateSubscriber(subscriberId: Swift.String, subscriberType: Swift.String, subscriberMetadata: Swift.String)
  public func reportVideoQuality(videoQuality: Swift.String)
  public func reportDeviceMarketingName(deviceMarketingName: Swift.String)
  public func reportDeviceID()
  public func reportAppData(appName: Swift.String, appVersion: Swift.String)
  public func enableLogTrace(logStTrace: Swift.Bool)
  public func reportError(error: Swift.String, playbackPosMilliSec: Swift.Int)
  public static func reportMetricValue(metricToOverride: MediaMelonNowtilustvOS.MMOverridableMetric, value: Swift.String)
  public func reportMediaTrackInfo(isSubtitleActive: Swift.Bool, subtitleTrack: Swift.String, audioTrack: Swift.String, isVDSActive: Swift.Bool)
  public func reportNetworkType(connInfo: MediaMelonNowtilustvOS.MMConnectionInfo)
  public func reportLocation(latitude: Swift.Double, longitude: Swift.Double)
  public func reportChunkRequest(chunkInfo: MediaMelonNowtilustvOS.MMChunkInformation)
  public func reportChunkRequest(bitrate: Swift.Int, fragmentDuration: Swift.Int?, url: Swift.String?)
  public func setPresentationInformation(presentationInfo: MediaMelonNowtilustvOS.MMPresentationInfo)
  public func reportDownloadRate(downloadRate: Swift.Int)
  public func reportBufferingStarted()
  public func reportBufferingCompleted()
  public func reportABRSwitch(prevBitrate: Swift.Int, newBitrate: Swift.Int)
  public func reportFrameLoss(lossCnt: Swift.Int)
  public func reportPresentationSize(width: Swift.Int, height: Swift.Int)
  public func reportPlayerSeekCompleted(seekEndPos: Swift.Int)
  public func reportPlayerSeekStarted()
  public func reportPlayerState(playerState: MediaMelonNowtilustvOS.MMPlayerState)
  public func registerForMMSDK(registrationInformation pInfo: MediaMelonNowtilustvOS.MMRegistrationInformation)
  public func reportUserInitiatedPlayback()
  public func initialiseSession(registrationUri: Swift.String, assetInformation: MediaMelonNowtilustvOS.MMAssetInformation)
  public func updatePlaybackPosition(currentPosition: Swift.Int)
  public func setToolboxEndpointDetails(url: Swift.String, tbtoken: Swift.String, tbid: Swift.String, cid: Swift.String)
  public func setStarzEndpointDetails(url: Swift.String, szapikey: Swift.String, szsession: Swift.String, cid: Swift.String)
  public func isAdPlaying() -> Swift.Bool
  weak public var genericAdDelegate: (any MediaMelonNowtilustvOS.GenericAdProtocol)?
  @objc override dynamic public init()
  @objc deinit
}
public class VOPlayerAlternateInfo {
  public init(tIndex: Swift.Int?, bitRate: Swift.Int?, width: Swift.Int?, height: Swift.Int?, codecIdentifier: Swift.String?)
  @objc deinit
}
public enum AdType : Swift.String, Swift.Codable {
  case inline
  case wrapper
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastAd : Swift.Codable {
  public var type: MediaMelonNowtilustvOS.AdType
  public let id: Swift.String
  public let sequence: Swift.Int?
  public let conditionalAd: Swift.Bool?
  public var adSystem: MediaMelonNowtilustvOS.VastAdSystem?
  public var impressions: [MediaMelonNowtilustvOS.VastImpression]
  public var adVerifications: [MediaMelonNowtilustvOS.VastVerification]
  public var viewableImpression: MediaMelonNowtilustvOS.VastViewableImpression?
  public var pricing: MediaMelonNowtilustvOS.VastPricing?
  public var errors: [Foundation.URL]
  public var creatives: [MediaMelonNowtilustvOS.VastCreative]
  public var extensions: [MediaMelonNowtilustvOS.VastExtension]
  public var adTitle: Swift.String?
  public var adCategories: [MediaMelonNowtilustvOS.VastAdCategory]
  public var description: Swift.String?
  public var advertiser: Swift.String?
  public var surveys: [MediaMelonNowtilustvOS.VastSurvey]
  public var wrapper: MediaMelonNowtilustvOS.VastWrapper?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastAd {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastAd : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastAd, b: MediaMelonNowtilustvOS.VastAd) -> Swift.Bool
}
public class MMSSAIAdInfo {
  public var adId: Swift.String
  public var adTitle: Swift.String
  public var adServer: Swift.String
  public var adIndex: Swift.Int
  public var adTotalAdsInPod: Swift.Int
  public var adDuration: Swift.Int64
  public var startTime: Swift.Int64
  public var endTime: Swift.Int64
  public var firstQuartile: Swift.Int64
  public var midPoint: Swift.Int64
  public var thirdQuartile: Swift.Int64
  public var complete: Swift.Int64
  public var adCurrentPlaybackTime: Swift.Int64
  public var position: Swift.String
  public var active: Swift.Bool
  public var adState: Swift.String
  public var streamType: Swift.String
  public var isLinear: Swift.Bool
  public var adTrackerInfo: MediaMelonNowtilustvOS.AdTrackerInfo?
  public var adImpressionsTemplates: [MediaMelonNowtilustvOS.VastImpression]
  public var adTrackingEvents: [MediaMelonNowtilustvOS.VastTrackingEvent]
  public var adClickEvents: [MediaMelonNowtilustvOS.VastVideoClick]
  public var adSkipOffset: Swift.Int64
  public var startPosition: Swift.Int64
  public var endPosition: Swift.Int64
  public init(aId: Swift.String, aTitle: Swift.String, aServer: Swift.String, aIndex: Swift.Int, adTotalAdsInPod: Swift.Int, aDuration: Swift.Int64, sTime: Swift.Int64, eTime: Swift.Int64, fqTime: Swift.Int64, mpTime: Swift.Int64, tqTime: Swift.Int64, complete: Swift.Int64, adCurrentTime: Swift.Int64, position: Swift.String, active: Swift.Bool, aState: Swift.String, sType: Swift.String, isLinear: Swift.Bool, atInfo: MediaMelonNowtilustvOS.AdTrackerInfo, aImpressionsTemplates: [MediaMelonNowtilustvOS.VastImpression], aTrackingEvents: [MediaMelonNowtilustvOS.VastTrackingEvent], adClickEvents: [MediaMelonNowtilustvOS.VastVideoClick], adSkipOffset: Swift.Int64, sPosition: Swift.Int64, ePosition: Swift.Int64)
  public func updateAdState(state: Swift.String)
  @objc deinit
}
public class AdTrackerInfo {
  public var isAdImpressionSent: Swift.Bool
  public var isAdStartSent: Swift.Bool
  public var isFirstQuartileSent: Swift.Bool
  public var isMidPointSent: Swift.Bool
  public var isThirdQuartileSent: Swift.Bool
  public var isAdCompleteSent: Swift.Bool
  public var isAdSkippedSent: Swift.Bool
  public init()
  public func resetToDefault()
  public func setAdComplete()
  @objc deinit
}
public enum CompanionsRequirement : Swift.String, Swift.Codable {
  case all
  case any
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastCompanionAds : Swift.Codable {
  public let required: MediaMelonNowtilustvOS.CompanionsRequirement
  public var companions: [MediaMelonNowtilustvOS.VastCompanionCreative]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastCompanionAds {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastCompanionAds : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastCompanionAds, b: MediaMelonNowtilustvOS.VastCompanionAds) -> Swift.Bool
}
public enum TrackingError : Swift.Error {
  case MissingAdBreak
  case unableToUpdateProgressTrackingComplete
  case unableToUpdateProgress(msg: Swift.String)
  case unableToProvideCreativeClickThroughUrls
  case internalError(msg: Swift.String)
  case unableToSkipAdAtThisTime
  case noAdFound(withId: Swift.String)
}
public struct VastAdSystem : Swift.Codable {
  public let version: Swift.String?
  public var system: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastAdSystem : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastAdSystem, b: MediaMelonNowtilustvOS.VastAdSystem) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class MMSSAIAdManager : ObjectiveC.NSObject {
  public var isAdManagerSet: Swift.Bool
  public var delegate: (any MediaMelonNowtilustvOS.MMSSAIDelegate)?
  @objc override dynamic public init()
  public func continueSSAIManager()
  public func setupMediaURL(mediaURL: Swift.String)
  public func parseVastFromManifest(vastUrl: Swift.String)
  public func setMacroSubstitution(macroData dictionary: Swift.Dictionary<Swift.String, Any>)
  public func setValidAdId(validAdId: Swift.String)
  public func setupSSAIAdManager(mediaURL: Swift.String, vastUrl: Swift.String, isLive: Swift.Bool)
  public func setupSSAIAdManager(mediaURL: Swift.String, isLive: Swift.Bool, pollForVast: Swift.Bool, vodResponseData: Foundation.Data, clientSideTracking: Swift.Bool)
  public func skipClicked(player: AVFoundation.AVPlayer)
  public func fireAdClickTrackingURLs()
  public func enableSSAILogTrace()
  public func disableSSAILogTrace()
  public func stopSSAIAdManager()
  public func notifyPlayerPlaybackTime(playbackTime: Swift.Int)
  public func syncPDTPosition(pdtInMs: Swift.Int64)
  @objc deinit
}
extension MediaMelonNowtilustvOS.MMSSAIAdManager : MediaMelonNowtilustvOS.VastTrackerDelegate {
  public func adFirstQuartile(vastTracker: MediaMelonNowtilustvOS.VastTracker, ad: MediaMelonNowtilustvOS.VastAd)
  public func adMidpoint(vastTracker: MediaMelonNowtilustvOS.VastTracker, ad: MediaMelonNowtilustvOS.VastAd)
  public func adThirdQuartile(vastTracker: MediaMelonNowtilustvOS.VastTracker, ad: MediaMelonNowtilustvOS.VastAd)
}
public struct VastClientOptions {
  public let wrapperLimit: Swift.Int
  public let singleWrapperTimeLimit: Foundation.TimeInterval
  public let timeLimit: Foundation.TimeInterval
  public let cachedVMAPModel: MediaMelonNowtilustvOS.VMAPModel?
  public init(wrapperLimit: Swift.Int = 5, singleWrapperTimeLimit: Foundation.TimeInterval = 5, timeLimit: Foundation.TimeInterval = 10, cachedVMAPModel: MediaMelonNowtilustvOS.VMAPModel? = nil)
}
public class VastClient {
  public static var trackingLogOutput: ((Swift.String, [Foundation.URL]) -> ())?
  public init(options: MediaMelonNowtilustvOS.VastClientOptions = VastClientOptions())
  public func parseVast(withContentsOf url: Foundation.URL, completion: @escaping (MediaMelonNowtilustvOS.VastModel?, (any Swift.Error)?) -> ())
  public func parseVast(withContentsOf stringXMLData: Swift.String, completion: @escaping (MediaMelonNowtilustvOS.VastModel?, (any Swift.Error)?) -> ())
  public func parseVMAP(withContentsOf url: Foundation.URL) throws -> MediaMelonNowtilustvOS.VMAPModel
  @objc deinit
}
public struct VastAdParameters : Swift.Codable {
  public let xmlEncoded: Swift.String?
  public var content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastAdParameters : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastAdParameters, b: MediaMelonNowtilustvOS.VastAdParameters) -> Swift.Bool
}
extension Swift.String {
  public var toSeconds: Swift.Double? {
    get
  }
}
@objc public class MMRegistrationInformation : ObjectiveC.NSObject {
  public var customerID: Swift.String!
  public var component: Swift.String!
  public var playerName: Swift.String!
  public var domainName: Swift.String?
  public var subscriberID: Swift.String?
  public var hashSubscriberID: Swift.Bool!
  public var subscriberType: Swift.String?
  public var subscriberTag: Swift.String?
  public var playerBrand: Swift.String?
  public var playerModel: Swift.String?
  public var playerVersion: Swift.String?
  @objc public init(customerID cID: Swift.String, playerName pName: Swift.String)
  @objc public func setDomain(_ dName: Swift.String?)
  @objc public func setSubscriberInformation(subscriberID subsID: Swift.String?, subscriberType subsType: Swift.String?, subscriberTag subsTag: Swift.String?, hashSubscriberID hashSubID: Swift.Bool)
  @objc public func setSubscriberInformation(subscriberID subsID: Swift.String?, subscriberType subsType: Swift.String?, subscriberTag subsTag: Swift.String?)
  @objc public func setPlayerInformation(brand: Swift.String?, model: Swift.String?, version: Swift.String?)
  @objc public func setComponentName(_ cName: Swift.String?)
  @objc deinit
}
public enum MMOverridableMetrics {
  case Latency, CDN, DurationWatched
  public static func == (a: MediaMelonNowtilustvOS.MMOverridableMetrics, b: MediaMelonNowtilustvOS.MMOverridableMetrics) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastCreativeExtension : Swift.Codable {
  public let mimeType: Swift.String?
  public var content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastCreativeExtension {
  public init?(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastCreativeExtension : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastCreativeExtension, b: MediaMelonNowtilustvOS.VastCreativeExtension) -> Swift.Bool
}
@objc public class MMAssetInformation : ObjectiveC.NSObject, Swift.Codable {
  public var assetURL: Swift.String!
  public var assetID: Swift.String?
  public var assetName: Swift.String?
  public var videoId: Swift.String?
  public var metafileURL: Foundation.URL?
  public var customKVPs: [Swift.String : Swift.String]!
  public var contentType: Swift.String?
  public var drmProtection: Swift.String?
  public var episodeNumber: Swift.String?
  public var genre: Swift.String?
  public var season: Swift.String?
  public var seriesTitle: Swift.String?
  @objc public init(assetURL aURL: Swift.String, assetID aId: Swift.String?, assetName aName: Swift.String?, videoId vId: Swift.String?)
  @objc public init(assetURL aURL: Swift.String, assetID aId: Swift.String?, assetName aName: Swift.String?, videoId vId: Swift.String?, contyentType cType: Swift.String? = nil, drmProtection: Swift.String? = nil, episodeNumber eNumber: Swift.String? = nil, genre: Swift.String? = nil, season: Swift.String? = nil, seriesTitle: Swift.String? = nil)
  @objc public func addCustomKVP(_ key: Swift.String, _ value: Swift.String)
  @objc public func setQBRMode(_ mode: MediaMelonNowtilustvOS.MMQBRMode, withMetaURL metaURL: Foundation.URL?)
  @objc public func setContentType(_ cType: Swift.String?)
  @objc public func setDrmProtection(_ drmP: Swift.String?)
  @objc public func setEpisodeNumber(_ eNumber: Swift.String?)
  @objc public func setGenre(_ genre: Swift.String?)
  @objc public func setSeason(_ season: Swift.String?)
  @objc public func setSeriesTitle(_ sTitle: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct VastAdCategory : Swift.Codable {
  public let authority: Foundation.URL?
  public var category: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastAdCategory : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastAdCategory, b: MediaMelonNowtilustvOS.VastAdCategory) -> Swift.Bool
}
extension MediaMelonNowtilustvOS.GenericMMWrapper {
  public static func getSSAIVersion() -> Swift.String
  public func initialiseSSAIAdManager(mediaUrl: Swift.String, vastUrl: Swift.String, isLive: Swift.Bool)
  public func initialiseSSAIAdManager(mediaUrl: Swift.String, isLive: Swift.Bool, pollForVast: Swift.Bool, vodResponseData: Foundation.Data, clientSideTracking: Swift.Bool)
  public func fireAdClickTrackingURLs()
  public func setMacroSubstitution(macroData dictionary: Swift.Dictionary<Swift.String, Any>)
  public func enableSSAILogTrace()
  public func disableSSAILogTrace()
  public func parseVastURL(vastURL: Swift.String)
  public func setValidAdId(validAdId: Swift.String)
  public func syncEpochTime(epochTime: Swift.Int64)
  public func stopSSAIAdManager()
}
extension MediaMelonNowtilustvOS.GenericMMWrapper : MediaMelonNowtilustvOS.MMSSAIDelegate {
  public func notifySSAIEventWithTimeline(state: MediaMelonNowtilustvOS.MMAdState, adTimeline: [MediaMelonNowtilustvOS.MMSSAIAdInfo])
  public func notifySSAIAdEvent(state: MediaMelonNowtilustvOS.MMAdState, adInfo: MediaMelonNowtilustvOS.MMSSAIAdInfo)
  public func notifyAdEventWith(state: MediaMelonNowtilustvOS.MMAdState, vastAd: MediaMelonNowtilustvOS.VastAd?, vastTracker: MediaMelonNowtilustvOS.VastTracker, andAdIndex index: Swift.Int)
}
public struct VastCreative : Swift.Codable {
  public let id: Swift.String?
  public let adId: Swift.String?
  public let sequence: Swift.Int?
  public let apiFramework: Swift.String?
  public var universalAdId: MediaMelonNowtilustvOS.VastUniversalAdId?
  public var creativeExtensions: [MediaMelonNowtilustvOS.VastCreativeExtension]
  public var linear: MediaMelonNowtilustvOS.VastLinearCreative?
  public var nonLinearAds: MediaMelonNowtilustvOS.VastNonLinearAdsCreative?
  public var companionAds: MediaMelonNowtilustvOS.VastCompanionAds?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.VastCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension MediaMelonNowtilustvOS.VastCreative : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.VastCreative, b: MediaMelonNowtilustvOS.VastCreative) -> Swift.Bool
}
public struct IconClicks : Swift.Codable {
  public var iconClickThrough: Foundation.URL?
  public var iconClickTracking: [MediaMelonNowtilustvOS.VastIconClickTracking]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MediaMelonNowtilustvOS.IconClicks : Swift.Equatable {
  public static func == (a: MediaMelonNowtilustvOS.IconClicks, b: MediaMelonNowtilustvOS.IconClicks) -> Swift.Bool
}
extension MediaMelonNowtilustvOS.VastErrorCodes : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VastErrorCodes : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VastErrorCodes : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.VastError : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VastError : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VMAPAdBreakType : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VMAPAdBreakType : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VMAPAdBreakType : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.VMAPError : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VMAPError : Swift.Hashable {}
extension MediaMelonNowtilustvOS.ClickType : Swift.Equatable {}
extension MediaMelonNowtilustvOS.ClickType : Swift.Hashable {}
extension MediaMelonNowtilustvOS.ClickType : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.PricingModel : Swift.Equatable {}
extension MediaMelonNowtilustvOS.PricingModel : Swift.Hashable {}
extension MediaMelonNowtilustvOS.PricingModel : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.VMAPAdSourceTemplate : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VMAPAdSourceTemplate : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VMAPAdSourceTemplate : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.VMAPErrorCodes : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VMAPErrorCodes : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VMAPErrorCodes : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.VMAPTrackingEventType : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VMAPTrackingEventType : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VMAPTrackingEventType : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.TrackingEventType : Swift.Equatable {}
extension MediaMelonNowtilustvOS.TrackingEventType : Swift.Hashable {}
extension MediaMelonNowtilustvOS.TrackingEventType : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.VastViewableImpressionType : Swift.Equatable {}
extension MediaMelonNowtilustvOS.VastViewableImpressionType : Swift.Hashable {}
extension MediaMelonNowtilustvOS.VastViewableImpressionType : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.ReachabilityMM.NetworkStatus : Swift.Equatable {}
extension MediaMelonNowtilustvOS.ReachabilityMM.NetworkStatus : Swift.Hashable {}
extension MediaMelonNowtilustvOS.MMSSAIAdSate : Swift.Equatable {}
extension MediaMelonNowtilustvOS.MMSSAIAdSate : Swift.Hashable {}
extension MediaMelonNowtilustvOS.MMSSAIAdSate : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.MMCurrentPlayerState : Swift.Equatable {}
extension MediaMelonNowtilustvOS.MMCurrentPlayerState : Swift.Hashable {}
extension MediaMelonNowtilustvOS.AdType : Swift.Equatable {}
extension MediaMelonNowtilustvOS.AdType : Swift.Hashable {}
extension MediaMelonNowtilustvOS.AdType : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.CompanionsRequirement : Swift.Equatable {}
extension MediaMelonNowtilustvOS.CompanionsRequirement : Swift.Hashable {}
extension MediaMelonNowtilustvOS.CompanionsRequirement : Swift.RawRepresentable {}
extension MediaMelonNowtilustvOS.MMOverridableMetrics : Swift.Equatable {}
extension MediaMelonNowtilustvOS.MMOverridableMetrics : Swift.Hashable {}
